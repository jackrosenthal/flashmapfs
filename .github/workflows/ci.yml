name: "Build and Run Tests"
on:
  - push
  - pull_request
jobs:
  clang-format-check:
    name: Check source code is formatted using clang-format
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Run clang-format check
      uses: jidicula/clang-format-action@v4.11.0
      with:
        clang-format-version: "16"
        exclude-regex: "^\\./3rdparty/.*$"
  build-check:
    name: "Check Build"
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        compiler:
          - "GCC"
          - "Clang"
    steps:
      - name: Install libfuse3-dev
        run: sudo apt-get install libfuse3-dev
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - uses: KyleMayes/install-llvm-action@v1
        if: matrix.compiler == 'Clang'
        with:
          version: "16.0.4"
          ubuntu-version: "22.04"
          env: true
      - uses: egor-tensin/setup-gcc@v1
        if: matrix.compiler == 'GCC'
        with:
          version: "12"
      - uses: BSFishy/meson-build@v1.0.3
        with:
          action: build
          directory: build
          meson-version: 1.2.1
          ninja-version: 1.11.1
      - name: Check binary is runnable
        run: build/fmapfs --help
  run-tests:
    name: "Run tests with ASAN and coverage"
    runs-on: ubuntu-22.04
    steps:
      - name: Install libfuse3-dev
        run: sudo apt-get install libfuse3-dev
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: "Install pytest"
        run: "pip install 'pytest~=7.4'"
      - uses: KyleMayes/install-llvm-action@v1
        with:
          version: "16.0.4"
          ubuntu-version: "22.04"
          env: true
      - uses: BSFishy/meson-build@v1.0.3
        with:
          action: build
          directory: build
          setup-options: -Db_coverage=true -Db_sanitize=address
          meson-version: 1.2.1
          ninja-version: 1.11.1
      - name: Run tests
        run: pytest --llvm-coverage-out build/cov.profdata
      - name: Convert coverage data to lcov
        run: |
          llvm-cov export \
            -instr-profile build/cov.profdata \
            -format lcov \
            -ignore-filename-regex 3rdparty \
            build/fmapfs > build/lcov.info
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/lcov.info
